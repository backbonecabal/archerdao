/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';


export interface IQueryAllPrices_inputs {
    inputLocations?: Array<string>;
    script?: string;
}


export class QueryAllPrices_inputs extends BaseModel implements IQueryAllPrices_inputs  {

    static INPUT_LOCATIONS_FIELD_NAME = 'inputLocations';
    static SCRIPT_FIELD_NAME = 'script';

    /** uint256[]: index locations within the script to insert input amounts dynamically */
    inputLocations: Array<string>;
    /** bytes: the compiled bytecode for the series of function calls to get the final price */
    script: string;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
    * @useFormGroupValuesToModel if true use formValues
    */
    constructor(values?: Partial<IQueryAllPrices_inputs>, useFormGroupValuesToModel = false) {
        super();
        this.inputLocations = new Array<string>(); 

        if (values) {
            this.setValues(values, useFormGroupValuesToModel);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: Partial<IQueryAllPrices_inputs>, useFormGroupValuesToModel = false): void {
        if (values) {
            const rawValues = this.getValuesToUse(values, useFormGroupValuesToModel);
            this.fillModelArray<string>(this, QueryAllPrices_inputs.INPUT_LOCATIONS_FIELD_NAME, rawValues.inputLocations, useFormGroupValuesToModel);
            this.script = this.getValue<string>(rawValues, QueryAllPrices_inputs.SCRIPT_FIELD_NAME);
            // set values in model properties for added formControls
            super.setValuesInAddedPropertiesOfAttachedFormControls(values, useFormGroupValuesToModel);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                inputLocations: new FormArray([]),
                script: new FormControl(this.script, [Validators.pattern('^(0x)?[a-fA-F0-9]+$'), ]),
            });
            // generate FormArray control elements
            this.fillFormArray<string>(QueryAllPrices_inputs.INPUT_LOCATIONS_FIELD_NAME, this.inputLocations);
        }
        return this._formGroup;
    }

    /**
     * set the FormGroup values to the model values.
    */
    setFormGroupValues() {
        this.fillFormArray<string>(QueryAllPrices_inputs.INPUT_LOCATIONS_FIELD_NAME, this.inputLocations);
        this.$formGroup.controls[QueryAllPrices_inputs.SCRIPT_FIELD_NAME].setValue(this.script);
        // set formValues in added formControls
        super.setFormGroupValuesInAddedFormControls();
    }
}
